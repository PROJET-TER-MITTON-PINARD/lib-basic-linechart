import { Injectable } from '@angular/core';
import { str } from '../data';
import * as i0 from "@angular/core";
export class DataService {
    constructor() {
        this.str = str;
        this.dataExample1 = [];
        this.dataExample2 = [];
        this.dataExample3 = [];
        this.dataExample4 = [];
        this.dataExample5 = [];
        this.dataExample6 = [];
        this.dataExample7 = [];
        this.generateExample();
    }
    parse(str, sensorId, f) {
        const L = str.trim().split("\n").map(s => s.trim()).filter(s => s !== "")
            .map(s => s.split(";").map(s => s.slice(1, -1)))
            .filter(tab => tab[1] === sensorId)
            .map(([t, id, v]) => ({
            timestamp: (new Date((t.replace(",", "."))).getTime()),
            value: f(v),
            sensorId: id
        }));
        return L;
    }
    parseBool(s) {
        if (s == 'ON')
            return 1;
        else if (s == 'OFF')
            return 0;
        else
            return -1;
    }
    generateData(label, color, style, interpolation, f) {
        let d = this.parse(this.str, label, f);
        let v = [];
        d.forEach(element => v.push([element.timestamp, element.value]));
        let da = {
            label: label,
            values: v,
            color: color,
            style: style,
            interpolation: interpolation
        };
        return da;
    }
    generateExample() {
        let d2 = this.parse(this.str, "PC5", this.parseBool);
        let v2 = [];
        d2.forEach(element => v2.push([element.timestamp, element.value]));
        let x = 0;
        v2.forEach(element => {
            element[1] = x;
            x = this.getRandomInt(x);
        });
        let da2 = {
            label: "PC5",
            values: v2,
            color: "purple",
            style: "line",
            interpolation: "linear"
        };
        this.dataExample2.push(this.generateData("PC6", "#124568", "both", "step", this.parseBool));
        this.dataExample1.push(da2);
        this.dataExample4.push(this.generateData("Temperature_Salon", "purple", "line", "linear", parseFloat));
        this.dataExample3.push(this.generateData("Presence_Salon", "pink", "line", "step", this.parseBool));
        this.dataExample3.push(this.generateData("PC6", "#124568", "both", "step", this.parseBool));
        this.dataExample5.push(this.generateData("Temperature_Cuisine", "gold", "line", "step", parseFloat));
        this.dataExample6.push(this.generateData("Presence_Cuisine", "purple", "both", "step", this.parseBool));
        this.dataExample7.push(this.generateData("Presence_SDB", "black", "area", "step", this.parseBool));
    }
    getRandomInt(x) {
        let alea;
        if (x == 0) {
            return 1;
        }
        else {
            alea = Math.round(Math.random());
            if (alea == 0) {
                return x - 1;
            }
            else {
                return x + 1;
            }
        }
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,