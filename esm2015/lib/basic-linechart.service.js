import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Service that give 6 example of dataset and function to parse DATA and Data from string.
 */
export class DataService {
    /**
     * Constructor
     * Launch generateExample with parameters this.str to fill all Dataset
     */
    constructor() {
        /**
         * str is an example of data's string
         */
        this.str = `  
  "2016-07-25 15:47:24,459";"PC6";"OFF"
  "2016-07-25 19:47:24,459";"PC6";"ON"
  "2016-07-26 05:47:24,459";"PC6";"OFF"
  "2016-07-26 06:47:24,459";"PC6";"ON"
  "2016-07-26 06:59:24,459";"PC6";"OFF"
  "2016-07-26 18:21:24,459";"PC6";"ON"
  "2016-07-27 11:00:24,459";"PC6";"OFF"
  "2016-07-28 08:32:24,459";"PC6";"ON"
  "2016-07-28 18:15:24,459";"PC6";"OFF"
  "2016-07-29 09:06:24,459";"PC6";"ON"
  "2016-07-29 19:36:24,459";"PC6";"OFF"
  "2016-07-25 15:47:24,459";"PC5";"OFF"
  "2016-07-25 22:47:24,459";"PC5";"ON"
  "2016-07-25 22:55:24,459";"PC5";"OFF"
  "2016-07-26 07:29:24,459";"PC5";"ON"
  "2016-07-26 20:59:24,459";"PC5";"OFF"
  "2016-07-27 06:21:24,459";"PC5";"ON"
  "2016-07-27 13:00:24,459";"PC5";"OFF"
  "2016-07-28 06:32:24,459";"PC5";"ON"
  "2016-07-28 14:15:24,459";"PC5";"OFF"
  "2016-07-29 06:06:24,459";"PC5";"ON"
  "2016-07-29 19:36:24,459";"PC5";"OFF"
  "2016-07-25 15:47:19,423";"Temperature_Cuisine";"26.7"
  "2016-07-25 15:48:20,279";"Temperature_Cuisine";"26.740000000000002"
  "2016-07-25 15:50:00,776";"Temperature_Cuisine";"26.76"
  "2016-07-25 15:55:00,275";"Temperature_Cuisine";"26.72"
  "2016-07-25 16:10:00,202";"Temperature_Cuisine";"26.68"
  "2016-07-25 16:15:00,197";"Temperature_Cuisine";"26.64"
  "2016-07-25 16:24:50,493";"Temperature_Cuisine";"26.560000000000002"
  "2016-07-25 16:29:50,204";"Temperature_Cuisine";"26.5"
  "2016-07-25 16:34:50,177";"Temperature_Cuisine";"26.46"
  "2016-07-25 16:39:50,128";"Temperature_Cuisine";"26.5"
  "2016-07-25 16:44:50,065";"Temperature_Cuisine";"26.52"
  "2016-07-25 15:47:19,423";"Temperature_Salon";"26.34"
  "2016-07-25 15:48:05,264";"Temperature_Salon";"26.38"
  "2016-07-25 15:53:05,275";"Temperature_Salon";"26.36"
  "2016-07-25 15:58:05,252";"Temperature_Salon";"26.34"
  "2016-07-25 16:08:05,234";"Temperature_Salon";"26.32"
  "2016-07-25 16:13:05,237";"Temperature_Salon";"26.28"
  "2016-07-25 16:23:05,172";"Temperature_Salon";"26.22"
  "2016-07-25 16:28:05,244";"Temperature_Salon";"26.16"
  "2016-07-25 16:29:55,490";"Temperature_Salon";"26.14"
  "2016-07-25 15:47:19,423";"PC3";"ON"
  "2016-07-25 15:48:20,279";"PC3";"OFF"
  "2016-07-25 15:50:00,776";"PC3";"ON"
  "2016-07-25 15:55:00,275";"PC3";"OFF"
  "2016-07-25 16:10:00,202";"PC3";"ON"
  "2016-07-25 16:15:00,197";"PC3";"OFF"
  "2016-07-25 16:24:50,493";"PC3";"ON"
  "2016-07-25 16:29:50,204";"PC3";"OFF"
  "2016-07-25 16:34:50,177";"PC3";"ON"
  "2016-07-25 16:39:50,128";"PC3";"OFF"
  "2016-07-25 16:44:50,065";"PC3";"ON"
  `;
        /**
         * Dataset 1
         */
        this.dataExample1 = [];
        /**
         * Dataset 2
         */
        this.dataExample2 = [];
        /**
         * Dataset 3
         */
        this.dataExample3 = [];
        /**
         * Dataset 4
         */
        this.dataExample4 = [];
        /**
         * Dataset 5
         */
        this.dataExample5 = [];
        /**
         * Dataset 6
         */
        this.dataExample6 = [];
        this.generateExample(this.str);
    }
    /**
     * Parse of str to obtain DATA[]
     * @param str
     * @param sensorId
     * @param f
     * @returns DATA[]
     */
    parse(str, sensorId, f) {
        /**
         * Const to parse DATA
         */
        const L = str.trim().split("\n").map(s => s.trim()).filter(s => s !== "")
            .map(s => s.split(";").map(s => s.slice(1, -1)))
            .filter(tab => tab[1] === sensorId)
            .map(([t, id, v]) => ({
            timestamp: (new Date((t.replace(",", "."))).getTime()),
            value: f(v),
            sensorId: id
        }));
        return L;
    }
    /**
     * Parse of str to obtain Data[]
     * @param str
     * @param label
     * @param color
     * @param style
     * @param interpolation
     * @param f
     * @returns Data[]
     */
    generateData(str, label, color, style, interpolation, f) {
        let d = this.parse(str, label, f);
        let v = [];
        d.forEach(element => v.push([element.timestamp, element.value]));
        let da = {
            label: label,
            values: v,
            color: color,
            style: style,
            interpolation: interpolation
        };
        return da;
    }
    /**
     * Transform string in number
     * @param s
     * @returns 1 if s=='ON', 0 if s=='OFF' else -1
     */
    parseBool(s) {
        if (s == 'ON')
            return 1;
        else if (s == 'OFF')
            return 0;
        else
            return -1;
    }
    /**
     * Generate all dataset
     * @param str
     */
    generateExample(str) {
        let d2 = this.parse(str, "PC5", this.parseBool);
        let v2 = [];
        d2.forEach(element => v2.push([element.timestamp, element.value]));
        let x = 0;
        v2.forEach(element => {
            element[1] = x;
            x = this.getRandomInt(x);
        });
        let da2 = {
            label: "PC4",
            values: v2,
            color: "purple",
            style: "line",
            interpolation: "linear"
        };
        this.dataExample2.push(this.generateData(str, "PC6", "#124568", "both", "step", this.parseBool));
        this.dataExample1.push(da2);
        this.dataExample4.push(this.generateData(str, "Temperature_Salon", "purple", "line", "linear", parseFloat));
        this.dataExample3.push(this.generateData(str, "PC5", "pink", "line", "step", this.parseBool));
        this.dataExample3.push(this.generateData(str, "PC6", "#124568", "both", "step", this.parseBool));
        this.dataExample5.push(this.generateData(str, "Temperature_Cuisine", "gold", "line", "step", parseFloat));
        this.dataExample6.push(this.generateData(str, "PC3", "green", "both", "step", this.parseBool));
    }
    /**
     * Get +1 or -1 on the param x
     * @param x
     * @returns x+1 or x-1 (random)
     */
    getRandomInt(x) {
        let alea;
        if (x == 0) {
            return 1;
        }
        else {
            alea = Math.round(Math.random());
            if (alea == 0) {
                return x - 1;
            }
            else {
                return x + 1;
            }
        }
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMtbGluZWNoYXJ0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9iYXNpYy1saW5lY2hhcnQvc3JjL2xpYi9iYXNpYy1saW5lY2hhcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOztBQTRCM0M7O0dBRUc7QUFDSCxNQUFNLE9BQU8sV0FBVztJQTRGdEI7OztPQUdHO0lBQ0g7UUE5RkE7O1dBRUc7UUFDSyxRQUFHLEdBQVc7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXNEckIsQ0FBQztRQUdGOztXQUVHO1FBQ0ksaUJBQVksR0FBVyxFQUFFLENBQUM7UUFFakM7O1dBRUc7UUFDSSxpQkFBWSxHQUFXLEVBQUUsQ0FBQztRQUVqQzs7V0FFRztRQUNJLGlCQUFZLEdBQVcsRUFBRSxDQUFDO1FBRWpDOztXQUVHO1FBQ0ksaUJBQVksR0FBVyxFQUFFLENBQUM7UUFFakM7O1dBRUc7UUFDSSxpQkFBWSxHQUFXLEVBQUUsQ0FBQztRQUVqQzs7V0FFRztRQUNJLGlCQUFZLEdBQVcsRUFBRSxDQUFDO1FBTy9CLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7O09BTUc7SUFDSyxLQUFLLENBQUksR0FBVyxFQUFFLFFBQWdCLEVBQUUsQ0FBbUI7UUFDakU7O1dBRUc7UUFDSCxNQUFNLENBQUMsR0FBa0IsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUcsRUFBRSxDQUFDO2FB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SSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUMsS0FBSyxFQUFDLFNBQVMsRUFBQyxNQUFNLEVBQUUsTUFBTSxFQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDM0csSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBQzdGLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxTQUFTLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztRQUM3RixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBQyxxQkFBcUIsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3pHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFDLEtBQUssRUFBQyxPQUFPLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLFlBQVksQ0FBQyxDQUFRO1FBQzNCLElBQUksSUFBWSxDQUFDO1FBQ2pCLElBQUcsQ0FBQyxJQUFFLENBQUMsRUFBQztZQUNOLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7YUFBSTtZQUNILElBQUksR0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDO1lBQy9CLElBQUcsSUFBSSxJQUFFLENBQUMsRUFBQztnQkFDVCxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUM7YUFDWjtpQkFBSTtnQkFDSCxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUM7YUFDWjtTQUNGO0lBQ0gsQ0FBQzs7d0dBck5VLFdBQVc7NEdBQVgsV0FBVyxjQU5WLE1BQU07MkZBTVAsV0FBVztrQkFQdkIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9iYXNpYy1saW5lY2hhcnQuY29tcG9uZW50JztcblxuLyoqXG4gKiBEQVRBJ3MgZm9ybWF0IHdoZW4gd2UgZXh0cmFjdCBkYXRhIGZyb20gYSBzdHJpbmcgXG4gKi9cbmludGVyZmFjZSBEQVRBPFQ+e1xuXG4gIC8qKlxuICAgKiBUaW1lc3RhbXBcbiAgICovXG4gIHRpbWVzdGFtcDogbnVtYmVyO1xuICBcbiAgLyoqXG4gICAqIFZhbHVlXG4gICAqL1xuICB2YWx1ZTogVDtcbiAgXG4gIC8qKlxuICAgKiBMYWJlbCBvZiBzZW5zb3IgaW4gZGF0YSBcbiAgICovXG4gIHNlbnNvcklkOiBzdHJpbmc7XG59XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG4vKipcbiAqIFNlcnZpY2UgdGhhdCBnaXZlIDYgZXhhbXBsZSBvZiBkYXRhc2V0IGFuZCBmdW5jdGlvbiB0byBwYXJzZSBEQVRBIGFuZCBEYXRhIGZyb20gc3RyaW5nLlxuICovXG5leHBvcnQgY2xhc3MgRGF0YVNlcnZpY2Uge1xuICBcbiAgLyoqXG4gICAqIHN0ciBpcyBhbiBleGFtcGxlIG9mIGRhdGEncyBzdHJpbmdcbiAgICovXG4gIHByaXZhdGUgc3RyOiBzdHJpbmcgPSBgICBcbiAgXCIyMDE2LTA3LTI1IDE1OjQ3OjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjUgMTk6NDc6MjQsNDU5XCI7XCJQQzZcIjtcIk9OXCJcbiAgXCIyMDE2LTA3LTI2IDA1OjQ3OjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjYgMDY6NDc6MjQsNDU5XCI7XCJQQzZcIjtcIk9OXCJcbiAgXCIyMDE2LTA3LTI2IDA2OjU5OjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjYgMTg6MjE6MjQsNDU5XCI7XCJQQzZcIjtcIk9OXCJcbiAgXCIyMDE2LTA3LTI3IDExOjAwOjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjggMDg6MzI6MjQsNDU5XCI7XCJQQzZcIjtcIk9OXCJcbiAgXCIyMDE2LTA3LTI4IDE4OjE1OjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjkgMDk6MDY6MjQsNDU5XCI7XCJQQzZcIjtcIk9OXCJcbiAgXCIyMDE2LTA3LTI5IDE5OjM2OjI0LDQ1OVwiO1wiUEM2XCI7XCJPRkZcIlxuICBcIjIwMTYtMDctMjUgMTU6NDc6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAyMjo0NzoyNCw0NTlcIjtcIlBDNVwiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMjI6NTU6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNiAwNzoyOToyNCw0NTlcIjtcIlBDNVwiO1wiT05cIlxuICBcIjIwMTYtMDctMjYgMjA6NTk6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNyAwNjoyMToyNCw0NTlcIjtcIlBDNVwiO1wiT05cIlxuICBcIjIwMTYtMDctMjcgMTM6MDA6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yOCAwNjozMjoyNCw0NTlcIjtcIlBDNVwiO1wiT05cIlxuICBcIjIwMTYtMDctMjggMTQ6MTU6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yOSAwNjowNjoyNCw0NTlcIjtcIlBDNVwiO1wiT05cIlxuICBcIjIwMTYtMDctMjkgMTk6MzY6MjQsNDU5XCI7XCJQQzVcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNTo0NzoxOSw0MjNcIjtcIlRlbXBlcmF0dXJlX0N1aXNpbmVcIjtcIjI2LjdcIlxuICBcIjIwMTYtMDctMjUgMTU6NDg6MjAsMjc5XCI7XCJUZW1wZXJhdHVyZV9DdWlzaW5lXCI7XCIyNi43NDAwMDAwMDAwMDAwMDJcIlxuICBcIjIwMTYtMDctMjUgMTU6NTA6MDAsNzc2XCI7XCJUZW1wZXJhdHVyZV9DdWlzaW5lXCI7XCIyNi43NlwiXG4gIFwiMjAxNi0wNy0yNSAxNTo1NTowMCwyNzVcIjtcIlRlbXBlcmF0dXJlX0N1aXNpbmVcIjtcIjI2LjcyXCJcbiAgXCIyMDE2LTA3LTI1IDE2OjEwOjAwLDIwMlwiO1wiVGVtcGVyYXR1cmVfQ3Vpc2luZVwiO1wiMjYuNjhcIlxuICBcIjIwMTYtMDctMjUgMTY6MTU6MDAsMTk3XCI7XCJUZW1wZXJhdHVyZV9DdWlzaW5lXCI7XCIyNi42NFwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyNDo1MCw0OTNcIjtcIlRlbXBlcmF0dXJlX0N1aXNpbmVcIjtcIjI2LjU2MDAwMDAwMDAwMDAwMlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyOTo1MCwyMDRcIjtcIlRlbXBlcmF0dXJlX0N1aXNpbmVcIjtcIjI2LjVcIlxuICBcIjIwMTYtMDctMjUgMTY6MzQ6NTAsMTc3XCI7XCJUZW1wZXJhdHVyZV9DdWlzaW5lXCI7XCIyNi40NlwiXG4gIFwiMjAxNi0wNy0yNSAxNjozOTo1MCwxMjhcIjtcIlRlbXBlcmF0dXJlX0N1aXNpbmVcIjtcIjI2LjVcIlxuICBcIjIwMTYtMDctMjUgMTY6NDQ6NTAsMDY1XCI7XCJUZW1wZXJhdHVyZV9DdWlzaW5lXCI7XCIyNi41MlwiXG4gIFwiMjAxNi0wNy0yNSAxNTo0NzoxOSw0MjNcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4zNFwiXG4gIFwiMjAxNi0wNy0yNSAxNTo0ODowNSwyNjRcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4zOFwiXG4gIFwiMjAxNi0wNy0yNSAxNTo1MzowNSwyNzVcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4zNlwiXG4gIFwiMjAxNi0wNy0yNSAxNTo1ODowNSwyNTJcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4zNFwiXG4gIFwiMjAxNi0wNy0yNSAxNjowODowNSwyMzRcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4zMlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoxMzowNSwyMzdcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4yOFwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyMzowNSwxNzJcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4yMlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyODowNSwyNDRcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4xNlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyOTo1NSw0OTBcIjtcIlRlbXBlcmF0dXJlX1NhbG9uXCI7XCIyNi4xNFwiXG4gIFwiMjAxNi0wNy0yNSAxNTo0NzoxOSw0MjNcIjtcIlBDM1wiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMTU6NDg6MjAsMjc5XCI7XCJQQzNcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNTo1MDowMCw3NzZcIjtcIlBDM1wiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMTU6NTU6MDAsMjc1XCI7XCJQQzNcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoxMDowMCwyMDJcIjtcIlBDM1wiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMTY6MTU6MDAsMTk3XCI7XCJQQzNcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNjoyNDo1MCw0OTNcIjtcIlBDM1wiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMTY6Mjk6NTAsMjA0XCI7XCJQQzNcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNjozNDo1MCwxNzdcIjtcIlBDM1wiO1wiT05cIlxuICBcIjIwMTYtMDctMjUgMTY6Mzk6NTAsMTI4XCI7XCJQQzNcIjtcIk9GRlwiXG4gIFwiMjAxNi0wNy0yNSAxNjo0NDo1MCwwNjVcIjtcIlBDM1wiO1wiT05cIlxuICBgO1xuXG4gIFxuICAvKipcbiAgICogRGF0YXNldCAxXG4gICAqL1xuICBwdWJsaWMgZGF0YUV4YW1wbGUxOiBEYXRhW10gPSBbXTsgXG4gIFxuICAvKipcbiAgICogRGF0YXNldCAyXG4gICAqL1xuICBwdWJsaWMgZGF0YUV4YW1wbGUyOiBEYXRhW10gPSBbXTtcbiAgXG4gIC8qKlxuICAgKiBEYXRhc2V0IDNcbiAgICovXG4gIHB1YmxpYyBkYXRhRXhhbXBsZTM6IERhdGFbXSA9IFtdO1xuICBcbiAgLyoqXG4gICAqIERhdGFzZXQgNFxuICAgKi9cbiAgcHVibGljIGRhdGFFeGFtcGxlNDogRGF0YVtdID0gW107XG4gIFxuICAvKipcbiAgICogRGF0YXNldCA1XG4gICAqL1xuICBwdWJsaWMgZGF0YUV4YW1wbGU1OiBEYXRhW10gPSBbXTtcbiAgXG4gIC8qKlxuICAgKiBEYXRhc2V0IDZcbiAgICovXG4gIHB1YmxpYyBkYXRhRXhhbXBsZTY6IERhdGFbXSA9IFtdO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvclxuICAgKiBMYXVuY2ggZ2VuZXJhdGVFeGFtcGxlIHdpdGggcGFyYW1ldGVycyB0aGlzLnN0ciB0byBmaWxsIGFsbCBEYXRhc2V0XG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdlbmVyYXRlRXhhbXBsZSh0aGlzLnN0cik7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2Ugb2Ygc3RyIHRvIG9idGFpbiBEQVRBW11cbiAgICogQHBhcmFtIHN0ciBcbiAgICogQHBhcmFtIHNlbnNvcklkIFxuICAgKiBAcGFyYW0gZiBcbiAgICogQHJldHVybnMgREFUQVtdXG4gICAqL1xuICBwcml2YXRlIHBhcnNlPFQ+KHN0cjogc3RyaW5nLCBzZW5zb3JJZDogc3RyaW5nLCBmOiAoczogc3RyaW5nKSA9PiBUKTogREFUQTxUPltdIHtcbiAgICAvKipcbiAgICAgKiBDb25zdCB0byBwYXJzZSBEQVRBXG4gICAgICovXG4gICAgY29uc3QgTDogREFUQSA8IFQgPiBbXSA9IHN0ci50cmltKCkuc3BsaXQoXCJcXG5cIikubWFwKHMgPT4gcy50cmltKCkpLmZpbHRlcihzID0+IHMhPT1cIlwiKVxuXG4gICAgICAgICAgICAgICAgIC5tYXAoIHMgPT4gcy5zcGxpdChcIjtcIikubWFwKCBzID0+IHMuc2xpY2UoMSwgLTEpICkgKVxuXG4gICAgICAgICAgICAgICAgIC5maWx0ZXIoIHRhYiA9PiB0YWJbMV0gPT09IHNlbnNvcklkIClcblxuICAgICAgICAgICAgICAgICAubWFwKCAoW3QsIGlkLCB2XSkgPT4gKHtcblxuICAgICAgICAgICAgICAgICAgICAgdGltZXN0YW1wOiAobmV3IERhdGUoKHQucmVwbGFjZShcIixcIiwgXCIuXCIpKSkuZ2V0VGltZSgpKSxcblxuICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGYodiksXG5cbiAgICAgICAgICAgICAgICAgICAgIHNlbnNvcklkOiBpZFxuXG4gICAgICAgICAgICAgICAgIH0pKTtcbiAgICByZXR1cm4gTDtcblxuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIG9mIHN0ciB0byBvYnRhaW4gRGF0YVtdXG4gICAqIEBwYXJhbSBzdHIgXG4gICAqIEBwYXJhbSBsYWJlbCBcbiAgICogQHBhcmFtIGNvbG9yIFxuICAgKiBAcGFyYW0gc3R5bGUgXG4gICAqIEBwYXJhbSBpbnRlcnBvbGF0aW9uIFxuICAgKiBAcGFyYW0gZiBcbiAgICogQHJldHVybnMgRGF0YVtdXG4gICAqL1xuICBwdWJsaWMgZ2VuZXJhdGVEYXRhKHN0cjpzdHJpbmcsIGxhYmVsOnN0cmluZywgY29sb3I6c3RyaW5nLCBzdHlsZTogXCJib3RoXCJ8XCJsaW5lXCJ8XCJhcmVhXCIsaW50ZXJwb2xhdGlvbjogXCJzdGVwXCJ8XCJsaW5lYXJcIiwgZjogKHM6c3RyaW5nKT0+bnVtYmVyKTpEYXRhe1xuICAgIGxldCBkOiBEQVRBPG51bWJlcj5bXSA9IHRoaXMucGFyc2U8bnVtYmVyPihzdHIsbGFiZWwsIGYpO1xuICAgIGxldCB2OiBbbnVtYmVyLG51bWJlcl1bXSA9IFtdO1xuICAgIGQuZm9yRWFjaChlbGVtZW50ID0+di5wdXNoKFtlbGVtZW50LnRpbWVzdGFtcCxlbGVtZW50LnZhbHVlXSkpO1xuICAgIGxldCBkYTogRGF0YSA9IHtcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIHZhbHVlczogdixcbiAgICAgIGNvbG9yOiBjb2xvcixcbiAgICAgIHN0eWxlOiBzdHlsZSxcbiAgICAgIGludGVycG9sYXRpb246IGludGVycG9sYXRpb25cbiAgICB9XG4gICAgcmV0dXJuIGRhO1xuICB9XG5cbiAgLyoqXG4gICAqIFRyYW5zZm9ybSBzdHJpbmcgaW4gbnVtYmVyXG4gICAqIEBwYXJhbSBzIFxuICAgKiBAcmV0dXJucyAxIGlmIHM9PSdPTicsIDAgaWYgcz09J09GRicgZWxzZSAtMVxuICAgKi9cbiAgcHVibGljIHBhcnNlQm9vbChzOiBzdHJpbmcpOm51bWJlciB7XG4gICAgaWYocz09J09OJykgcmV0dXJuIDE7XG4gICAgZWxzZSBpZiAocz09J09GRicpIHJldHVybiAwO1xuICAgIGVsc2UgcmV0dXJuIC0xO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFsbCBkYXRhc2V0XG4gICAqIEBwYXJhbSBzdHIgXG4gICAqL1xuICBwcml2YXRlIGdlbmVyYXRlRXhhbXBsZShzdHI6c3RyaW5nKXtcbiAgICBsZXQgZDI6IERBVEE8bnVtYmVyPltdID0gdGhpcy5wYXJzZTxudW1iZXI+KHN0cixcIlBDNVwiLCB0aGlzLnBhcnNlQm9vbCk7XG4gICAgbGV0IHYyOiBbbnVtYmVyLG51bWJlcl1bXSA9IFtdO1xuICAgIGQyLmZvckVhY2goZWxlbWVudCA9PnYyLnB1c2goW2VsZW1lbnQudGltZXN0YW1wLGVsZW1lbnQudmFsdWVdKSk7XG4gICAgbGV0IHg6bnVtYmVyID0gMDtcbiAgICB2Mi5mb3JFYWNoKGVsZW1lbnQ9PiB7XG4gICAgICBlbGVtZW50WzFdPXg7XG4gICAgICB4PXRoaXMuZ2V0UmFuZG9tSW50KHgpO1xuICAgIH1cbiAgICAgICk7XG4gICAgbGV0IGRhMjogRGF0YSA9IHtcbiAgICAgIGxhYmVsOiBcIlBDNFwiLFxuICAgICAgdmFsdWVzOiB2MixcbiAgICAgIGNvbG9yOiBcInB1cnBsZVwiLFxuICAgICAgc3R5bGU6IFwibGluZVwiLFxuICAgICAgaW50ZXJwb2xhdGlvbjogXCJsaW5lYXJcIlxuICAgIH1cbiAgICBcbiAgICB0aGlzLmRhdGFFeGFtcGxlMi5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKHN0cixcIlBDNlwiLFwiIzEyNDU2OFwiLFwiYm90aFwiLCBcInN0ZXBcIix0aGlzLnBhcnNlQm9vbCkpO1xuICAgIHRoaXMuZGF0YUV4YW1wbGUxLnB1c2goZGEyKTtcbiAgICB0aGlzLmRhdGFFeGFtcGxlNC5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKHN0cixcIlRlbXBlcmF0dXJlX1NhbG9uXCIsIFwicHVycGxlXCIsIFwibGluZVwiLCBcImxpbmVhclwiLCBwYXJzZUZsb2F0KSk7XG4gICAgdGhpcy5kYXRhRXhhbXBsZTMucHVzaCh0aGlzLmdlbmVyYXRlRGF0YShzdHIsXCJQQzVcIiwgXCJwaW5rXCIsIFwibGluZVwiLCBcInN0ZXBcIiwgdGhpcy5wYXJzZUJvb2wpKTtcbiAgICB0aGlzLmRhdGFFeGFtcGxlMy5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKHN0cixcIlBDNlwiLFwiIzEyNDU2OFwiLFwiYm90aFwiLCBcInN0ZXBcIix0aGlzLnBhcnNlQm9vbCkpO1xuICAgIHRoaXMuZGF0YUV4YW1wbGU1LnB1c2godGhpcy5nZW5lcmF0ZURhdGEoc3RyLFwiVGVtcGVyYXR1cmVfQ3Vpc2luZVwiLCBcImdvbGRcIiwgXCJsaW5lXCIsIFwic3RlcFwiLCBwYXJzZUZsb2F0KSk7XG4gICAgdGhpcy5kYXRhRXhhbXBsZTYucHVzaCh0aGlzLmdlbmVyYXRlRGF0YShzdHIsXCJQQzNcIixcImdyZWVuXCIsXCJib3RoXCIsIFwic3RlcFwiLHRoaXMucGFyc2VCb29sKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0ICsxIG9yIC0xIG9uIHRoZSBwYXJhbSB4XG4gICAqIEBwYXJhbSB4IFxuICAgKiBAcmV0dXJucyB4KzEgb3IgeC0xIChyYW5kb20pXG4gICAqL1xuICBwcml2YXRlIGdldFJhbmRvbUludCh4Om51bWJlcil7XG4gICAgbGV0IGFsZWE6IG51bWJlcjtcbiAgICBpZih4PT0wKXtcbiAgICAgIHJldHVybiAxO1xuICAgIH1lbHNle1xuICAgICAgYWxlYT1NYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkpO1xuICAgICAgaWYoYWxlYT09MCl7XG4gICAgICAgIHJldHVybiB4LTE7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHgrMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==