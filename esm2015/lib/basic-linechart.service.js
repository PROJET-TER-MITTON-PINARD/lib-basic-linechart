import { Injectable } from '@angular/core';
import { str } from '../data';
import * as i0 from "@angular/core";
export function parseBool(s) {
    if (s == 'ON')
        return 1;
    else if (s == 'OFF')
        return 0;
    else
        return -1;
}
export class DataService {
    constructor() {
        this.str = str;
        this.dataExample1 = [];
        this.dataExample2 = [];
        this.dataExample3 = [];
        this.dataExample4 = [];
        this.dataExample5 = [];
        this.dataExample6 = [];
        this.dataExample7 = [];
        this.generateExample();
    }
    parse(str, sensorId, f) {
        const L = str.trim().split("\n").map(s => s.trim()).filter(s => s !== "")
            .map(s => s.split(";").map(s => s.slice(1, -1)))
            .filter(tab => tab[1] === sensorId)
            .map(([t, id, v]) => ({
            timestamp: (new Date((t.replace(",", "."))).getTime()),
            value: f(v),
            sensorId: id
        }));
        return L;
    }
    generateData(label, color, style, interpolation, f) {
        let d = this.parse(this.str, label, f);
        let v = [];
        d.forEach(element => v.push([element.timestamp, element.value]));
        let da = {
            label: label,
            values: v,
            color: color,
            style: style,
            interpolation: interpolation
        };
        return da;
    }
    generateExample() {
        let d2 = this.parse(this.str, "PC5", parseBool);
        let v2 = [];
        d2.forEach(element => v2.push([element.timestamp, element.value]));
        let x = 0;
        v2.forEach(element => {
            element[1] = x;
            x = this.getRandomInt(x);
        });
        let da2 = {
            label: "PC5",
            values: v2,
            color: "purple",
            style: "line",
            interpolation: "linear"
        };
        this.dataExample2.push(this.generateData("PC6", "#124568", "both", "step", parseBool));
        this.dataExample1.push(da2);
        this.dataExample4.push(this.generateData("Presence_Salon", "pink", "line", "step", parseBool));
        this.dataExample3.push(this.generateData("Temperature_Salon", "purple", "line", "linear", parseFloat));
        this.dataExample3.push(this.generateData("PC6", "#124568", "both", "step", parseBool));
        this.dataExample5.push(this.generateData("Temperature_Cuisine", "gold", "line", "step", parseFloat));
        this.dataExample6.push(this.generateData("Presence_Cuisine", "purple", "both", "step", parseBool));
        this.dataExample7.push(this.generateData("Presence_SDB", "black", "area", "step", parseBool));
    }
    getRandomInt(x) {
        let alea;
        if (x == 0) {
            return 1;
        }
        else {
            alea = Math.round(Math.random());
            if (alea == 0) {
                return x - 1;
            }
            else {
                return x + 1;
            }
        }
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzaWMtbGluZWNoYXJ0LnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9iYXNpYy1saW5lY2hhcnQvc3JjL2xpYi9iYXNpYy1saW5lY2hhcnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxTQUFTLENBQUM7O0FBRTVCLE1BQU0sVUFBVSxTQUFTLENBQUMsQ0FBUztJQUNqQyxJQUFHLENBQUMsSUFBRSxJQUFJO1FBQUUsT0FBTyxDQUFDLENBQUM7U0FDaEIsSUFBSSxDQUFDLElBQUUsS0FBSztRQUFFLE9BQU8sQ0FBQyxDQUFDOztRQUN2QixPQUFPLENBQUMsQ0FBQyxDQUFDO0FBQ2pCLENBQUM7QUFZRCxNQUFNLE9BQU8sV0FBVztJQVl0QjtRQVZRLFFBQUcsR0FBVyxHQUFHLENBQUM7UUFFbkIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFDMUIsaUJBQVksR0FBVyxFQUFFLENBQUM7UUFHL0IsSUFBSSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFFTyxLQUFLLENBQUksR0FBVyxFQUFFLFFBQWdCLEVBQUUsQ0FBbUI7UUFFakUsTUFBTSxDQUFDLEdBQWtCLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLENB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QkFBSTtnQkFDSCxPQUFPLENBQUMsR0FBQyxDQUFDLENBQUM7YUFDWjtTQUNGO0lBQ0gsQ0FBQzs7d0dBM0ZVLFdBQVc7NEdBQVgsV0FBVyxjQUhWLE1BQU07MkZBR1AsV0FBVztrQkFKdkIsVUFBVTttQkFBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9iYXNpYy1saW5lY2hhcnQuY29tcG9uZW50JztcbmltcG9ydCB7c3RyfSBmcm9tICcuLi9kYXRhJztcblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQm9vbChzOiBzdHJpbmcpOm51bWJlciB7XG4gIGlmKHM9PSdPTicpIHJldHVybiAxO1xuICBlbHNlIGlmIChzPT0nT0ZGJykgcmV0dXJuIDA7XG4gIGVsc2UgcmV0dXJuIC0xO1xufVxuXG5pbnRlcmZhY2UgREFUQTxUPntcbiAgdGltZXN0YW1wOiBudW1iZXI7XG4gIHZhbHVlOiBUO1xuICBzZW5zb3JJZDogc3RyaW5nO1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIERhdGFTZXJ2aWNlIHtcblxuICBwcml2YXRlIHN0cjogc3RyaW5nID0gc3RyO1xuXG4gIHB1YmxpYyBkYXRhRXhhbXBsZTE6IERhdGFbXSA9IFtdOyBcbiAgcHVibGljIGRhdGFFeGFtcGxlMjogRGF0YVtdID0gW107XG4gIHB1YmxpYyBkYXRhRXhhbXBsZTM6IERhdGFbXSA9IFtdO1xuICBwdWJsaWMgZGF0YUV4YW1wbGU0OiBEYXRhW10gPSBbXTtcbiAgcHVibGljIGRhdGFFeGFtcGxlNTogRGF0YVtdID0gW107XG4gIHB1YmxpYyBkYXRhRXhhbXBsZTY6IERhdGFbXSA9IFtdO1xuICBwdWJsaWMgZGF0YUV4YW1wbGU3OiBEYXRhW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmdlbmVyYXRlRXhhbXBsZSgpO1xuICB9XG5cbiAgcHJpdmF0ZSBwYXJzZTxUPihzdHI6IHN0cmluZywgc2Vuc29ySWQ6IHN0cmluZywgZjogKHM6IHN0cmluZykgPT4gVCk6IERBVEE8VD5bXSB7XG5cbiAgICBjb25zdCBMOiBEQVRBIDwgVCA+IFtdID0gc3RyLnRyaW0oKS5zcGxpdChcIlxcblwiKS5tYXAocyA9PiBzLnRyaW0oKSkuZmlsdGVyKHMgPT4gcyE9PVwiXCIpXG5cbiAgICAgICAgICAgICAgICAgLm1hcCggcyA9PiBzLnNwbGl0KFwiO1wiKS5tYXAoIHMgPT4gcy5zbGljZSgxLCAtMSkgKSApXG5cbiAgICAgICAgICAgICAgICAgLmZpbHRlciggdGFiID0+IHRhYlsxXSA9PT0gc2Vuc29ySWQgKVxuXG4gICAgICAgICAgICAgICAgIC5tYXAoIChbdCwgaWQsIHZdKSA9PiAoe1xuXG4gICAgICAgICAgICAgICAgICAgICB0aW1lc3RhbXA6IChuZXcgRGF0ZSgodC5yZXBsYWNlKFwiLFwiLCBcIi5cIikpKS5nZXRUaW1lKCkpLFxuXG4gICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZih2KSxcblxuICAgICAgICAgICAgICAgICAgICAgc2Vuc29ySWQ6IGlkXG5cbiAgICAgICAgICAgICAgICAgfSkpO1xuICAgIHJldHVybiBMO1xuXG4gIH1cblxuICBwdWJsaWMgZ2VuZXJhdGVEYXRhKGxhYmVsOnN0cmluZywgY29sb3I6c3RyaW5nLCBzdHlsZTogXCJib3RoXCJ8XCJsaW5lXCJ8XCJhcmVhXCIsaW50ZXJwb2xhdGlvbjogXCJzdGVwXCJ8XCJsaW5lYXJcIiwgZjogKHM6c3RyaW5nKT0+bnVtYmVyKTpEYXRhe1xuICAgIGxldCBkOiBEQVRBPG51bWJlcj5bXSA9IHRoaXMucGFyc2U8bnVtYmVyPih0aGlzLnN0cixsYWJlbCwgZik7XG4gICAgbGV0IHY6IFtudW1iZXIsbnVtYmVyXVtdID0gW107XG4gICAgZC5mb3JFYWNoKGVsZW1lbnQgPT52LnB1c2goW2VsZW1lbnQudGltZXN0YW1wLGVsZW1lbnQudmFsdWVdKSk7XG4gICAgbGV0IGRhOiBEYXRhID0ge1xuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgdmFsdWVzOiB2LFxuICAgICAgY29sb3I6IGNvbG9yLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgaW50ZXJwb2xhdGlvbjogaW50ZXJwb2xhdGlvblxuICAgIH1cbiAgICByZXR1cm4gZGE7XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlRXhhbXBsZSgpe1xuICAgIGxldCBkMjogREFUQTxudW1iZXI+W10gPSB0aGlzLnBhcnNlPG51bWJlcj4odGhpcy5zdHIsXCJQQzVcIiwgcGFyc2VCb29sKTtcbiAgICBsZXQgdjI6IFtudW1iZXIsbnVtYmVyXVtdID0gW107XG4gICAgZDIuZm9yRWFjaChlbGVtZW50ID0+djIucHVzaChbZWxlbWVudC50aW1lc3RhbXAsZWxlbWVudC52YWx1ZV0pKTtcbiAgICBsZXQgeDpudW1iZXIgPSAwO1xuICAgIHYyLmZvckVhY2goZWxlbWVudD0+IHtcbiAgICAgIGVsZW1lbnRbMV09eDtcbiAgICAgIHg9dGhpcy5nZXRSYW5kb21JbnQoeCk7XG4gICAgfVxuICAgICAgKTtcbiAgICBsZXQgZGEyOiBEYXRhID0ge1xuICAgICAgbGFiZWw6IFwiUEM1XCIsXG4gICAgICB2YWx1ZXM6IHYyLFxuICAgICAgY29sb3I6IFwicHVycGxlXCIsXG4gICAgICBzdHlsZTogXCJsaW5lXCIsXG4gICAgICBpbnRlcnBvbGF0aW9uOiBcImxpbmVhclwiXG4gICAgfVxuICAgIFxuICAgIHRoaXMuZGF0YUV4YW1wbGUyLnB1c2godGhpcy5nZW5lcmF0ZURhdGEoXCJQQzZcIixcIiMxMjQ1NjhcIixcImJvdGhcIiwgXCJzdGVwXCIscGFyc2VCb29sKSk7XG4gICAgdGhpcy5kYXRhRXhhbXBsZTEucHVzaChkYTIpO1xuICAgIHRoaXMuZGF0YUV4YW1wbGU0LnB1c2godGhpcy5nZW5lcmF0ZURhdGEoXCJQcmVzZW5jZV9TYWxvblwiLCBcInBpbmtcIiwgXCJsaW5lXCIsIFwic3RlcFwiLCBwYXJzZUJvb2wpKTtcbiAgICB0aGlzLmRhdGFFeGFtcGxlMy5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKFwiVGVtcGVyYXR1cmVfU2Fsb25cIiwgXCJwdXJwbGVcIiwgXCJsaW5lXCIsIFwibGluZWFyXCIsIHBhcnNlRmxvYXQpKTtcbiAgICB0aGlzLmRhdGFFeGFtcGxlMy5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKFwiUEM2XCIsXCIjMTI0NTY4XCIsXCJib3RoXCIsIFwic3RlcFwiLHBhcnNlQm9vbCkpO1xuICAgIHRoaXMuZGF0YUV4YW1wbGU1LnB1c2godGhpcy5nZW5lcmF0ZURhdGEoXCJUZW1wZXJhdHVyZV9DdWlzaW5lXCIsIFwiZ29sZFwiLCBcImxpbmVcIiwgXCJzdGVwXCIsIHBhcnNlRmxvYXQpKTtcbiAgICB0aGlzLmRhdGFFeGFtcGxlNi5wdXNoKHRoaXMuZ2VuZXJhdGVEYXRhKFwiUHJlc2VuY2VfQ3Vpc2luZVwiLCBcInB1cnBsZVwiLCBcImJvdGhcIiwgXCJzdGVwXCIsIHBhcnNlQm9vbCkpO1xuICAgIHRoaXMuZGF0YUV4YW1wbGU3LnB1c2godGhpcy5nZW5lcmF0ZURhdGEoXCJQcmVzZW5jZV9TREJcIiwgXCJibGFja1wiLCBcImFyZWFcIiwgXCJzdGVwXCIsIHBhcnNlQm9vbCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRSYW5kb21JbnQoeDpudW1iZXIpe1xuICAgIGxldCBhbGVhOiBudW1iZXI7XG4gICAgaWYoeD09MCl7XG4gICAgICByZXR1cm4gMTtcbiAgICB9ZWxzZXtcbiAgICAgIGFsZWE9TWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKTtcbiAgICAgIGlmKGFsZWE9PTApe1xuICAgICAgICByZXR1cm4geC0xO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB4KzE7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=