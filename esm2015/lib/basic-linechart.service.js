import { Injectable } from '@angular/core';
import { parseBool } from './basic-linechart.component';
import { str } from './data';
import * as i0 from "@angular/core";
export class DataService {
    constructor() {
        this.str = str;
        this.dataExample1 = [];
        this.dataExample2 = [];
        this.dataExample3 = [];
        this.dataExample4 = [];
        this.dataExample5 = [];
        this.dataExample6 = [];
        this.dataExample7 = [];
        this.generateData();
    }
    parse(str, sensorId, f) {
        const L = str.trim().split("\n").map(s => s.trim()).filter(s => s !== "")
            .map(s => s.split(";").map(s => s.slice(1, -1)))
            .filter(tab => tab[1] === sensorId)
            .map(([t, id, v]) => ({
            timestamp: (new Date((t.replace(",", "."))).getTime()),
            value: f(v),
            sensorId: id
        }));
        return L;
    }
    generateData() {
        let d1 = this.parse(this.str, "PC6", parseBool);
        let v1 = [];
        d1.forEach(element => v1.push([element.timestamp, element.value]));
        let da1 = {
            label: "PC6",
            values: v1,
            color: "#124568",
            style: "both",
            interpolation: "step"
        };
        let d2 = this.parse(this.str, "PC5", parseBool);
        let v2 = [];
        d2.forEach(element => v2.push([element.timestamp, element.value]));
        let x = 0;
        v2.forEach(element => {
            element[1] = x;
            x = this.getRandomInt(x);
        });
        let da2 = {
            label: "PC5",
            values: v2,
            color: "purple",
            style: "line",
            interpolation: "linear"
        };
        let d3 = this.parse(this.str, "Presence_Salon", parseBool);
        let v3 = [];
        d3.forEach(element => v3.push([element.timestamp, element.value]));
        let da3 = {
            label: "Presence_Salon",
            values: v3,
            color: "pink",
            style: "line",
            interpolation: "step"
        };
        let d4 = this.parse(this.str, "Temperature_Salon", parseFloat);
        let v4 = [];
        d4.forEach(element => v4.push([element.timestamp, element.value]));
        let da4 = {
            label: "Temperature_Salon",
            values: v4,
            color: "purple",
            style: "line",
            interpolation: "linear"
        };
        let d5 = this.parse(this.str, "Temperature_Cuisine", parseFloat);
        let v5 = [];
        d5.forEach(element => v5.push([element.timestamp, element.value]));
        let da5 = {
            label: "Temperature_Cuisine",
            values: v5,
            color: "gold",
            style: "line",
            interpolation: "step"
        };
        let d6 = this.parse(this.str, "Presence_Cuisine", parseBool);
        let v6 = [];
        d6.forEach(element => v6.push([element.timestamp, element.value]));
        let da6 = {
            label: "Presence_Cuisine",
            values: v6,
            color: "purple",
            style: "both",
            interpolation: "step"
        };
        let d7 = this.parse(this.str, "Presence_SDB", parseBool);
        let v7 = [];
        d7.forEach(element => v7.push([element.timestamp, element.value]));
        let da7 = {
            label: "Presence_SDB",
            values: v7,
            color: "black",
            style: "area",
            interpolation: "step"
        };
        this.dataExample2.push(da1);
        this.dataExample1.push(da2);
        this.dataExample4.push(da4);
        this.dataExample3.push(da3);
        this.dataExample3.push(da1);
        this.dataExample5.push(da5);
        this.dataExample6.push(da6);
        this.dataExample7.push(da7);
    }
    getRandomInt(x) {
        let alea;
        if (x == 0) {
            return 1;
        }
        else {
            alea = Math.round(Math.random());
            if (alea == 0) {
                return x - 1;
            }
            else {
                return x + 1;
            }
        }
    }
}
DataService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
DataService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.0.3", ngImport: i0, type: DataService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,